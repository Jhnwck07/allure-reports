{"uid":"4b41af4004061ca0","name":"test_site","fullName":"test_check#test_site","historyId":"03b4c666dd8ec774ef4f7e74fc938832","time":{"start":1744356336559,"stop":1744356342883,"duration":6324},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression //span[@aria-label='MEN' because of the following error:\nSyntaxError: Failed to execute 'evaluate' on 'Document': The string '//span[@aria-label='MEN'' is not a valid XPath expression.\n  (Session info: chrome=135.0.7049.85); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\n\tGetHandleVerifier [0x00B880E3+60707]\n\tGetHandleVerifier [0x00B88124+60772]\n\t(No symbol) [0x009B0683]\n\t(No symbol) [0x009B6DE7]\n\t(No symbol) [0x009B90DA]\n\t(No symbol) [0x009B9157]\n\t(No symbol) [0x009F7EF4]\n\t(No symbol) [0x009F89FB]\n\t(No symbol) [0x00A41022]\n\t(No symbol) [0x00A1D094]\n\t(No symbol) [0x00A3E824]\n\t(No symbol) [0x00A1CE46]\n\t(No symbol) [0x009EC5D3]\n\t(No symbol) [0x009ED424]\n\tGetHandleVerifier [0x00DCBBC3+2435075]\n\tGetHandleVerifier [0x00DC7163+2416035]\n\tGetHandleVerifier [0x00DE350C+2531660]\n\tGetHandleVerifier [0x00B9F1B5+155125]\n\tGetHandleVerifier [0x00BA5B5D+182173]\n\tGetHandleVerifier [0x00B8F9B8+91640]\n\tGetHandleVerifier [0x00B8FB60+92064]\n\tGetHandleVerifier [0x00B7A620+4704]\n\tBaseThreadInitThunk [0x76275D49+25]\n\tRtlInitializeExceptionChain [0x773ACF0B+107]\n\tRtlGetAppContainerNamedObjectPath [0x773ACE91+561]","statusTrace":"setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a5bef57b5dca77a1aa683b91b3bbf8b9\")>\n\n    def test_site(setup):\n        driver = setup\n        driver.get(\"https://www.ajio.com/\")\n    \n>       element = driver.find_element(By.XPATH, \"//span[@aria-label='MEN'\")\n\ntest_check.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002049FCD82F0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector: Unable to locate an elemen...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x773ACF0B+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x773ACE91+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression //span[@aria-label='MEN' because of the following error:\nE       SyntaxError: Failed to execute 'evaluate' on 'Document': The string '//span[@aria-label='MEN'' is not a valid XPath expression.\nE         (Session info: chrome=135.0.7049.85); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00B880E3+60707]\nE       \tGetHandleVerifier [0x00B88124+60772]\nE       \t(No symbol) [0x009B0683]\nE       \t(No symbol) [0x009B6DE7]\nE       \t(No symbol) [0x009B90DA]\nE       \t(No symbol) [0x009B9157]\nE       \t(No symbol) [0x009F7EF4]\nE       \t(No symbol) [0x009F89FB]\nE       \t(No symbol) [0x00A41022]\nE       \t(No symbol) [0x00A1D094]\nE       \t(No symbol) [0x00A3E824]\nE       \t(No symbol) [0x00A1CE46]\nE       \t(No symbol) [0x009EC5D3]\nE       \t(No symbol) [0x009ED424]\nE       \tGetHandleVerifier [0x00DCBBC3+2435075]\nE       \tGetHandleVerifier [0x00DC7163+2416035]\nE       \tGetHandleVerifier [0x00DE350C+2531660]\nE       \tGetHandleVerifier [0x00B9F1B5+155125]\nE       \tGetHandleVerifier [0x00BA5B5D+182173]\nE       \tGetHandleVerifier [0x00B8F9B8+91640]\nE       \tGetHandleVerifier [0x00B8FB60+92064]\nE       \tGetHandleVerifier [0x00B7A620+4704]\nE       \tBaseThreadInitThunk [0x76275D49+25]\nE       \tRtlInitializeExceptionChain [0x773ACF0B+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x773ACE91+561]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSelectorException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1744356329166,"stop":1744356336557,"duration":7391},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"afterStages":[{"name":"setup::0","time":{"start":1744356343123,"stop":1744356345953,"duration":2830},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"labels":[{"name":"suite","value":"test_check"},{"name":"host","value":"DESKTOP-0Q1NQ4H"},{"name":"thread","value":"6948-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_check"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"4b41af4004061ca0.json","parameterValues":[]}