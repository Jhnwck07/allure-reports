{"uid":"7575ac16ac012e14","name":"test_TC002","fullName":"Xeed_Login_Page.Test_TC002#test_TC002","historyId":"44806385f324a5a4c762d7477075b911","time":{"start":1749119767551,"stop":1749119779962,"duration":12411},"status":"failed","statusMessage":"Failed: Login failed - URL did not change to dashboard","statusTrace":"setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5b5a6fbe919beba8c0f049feb5b8bfb2\")>\n\n    @allure.feature(\"XEED_Ventures_Login_Page\")\n    def test_TC002(setup):\n        driver = setup\n        wait = WebDriverWait(driver, 10)  # 10 seconds explicit wait\n    \n        with allure.step(\"Open Xeed Ventures Login Page\"):\n            driver.get(\"http://157.15.202.244:88/authentication/login\")\n    \n        with allure.step(\"Wait for and click on username field\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@id='username']\")))\n            element.click()\n    \n        with allure.step(\"Type in the username\"):\n            element.send_keys(\"Rohit\")\n    \n        with allure.step(\"Wait for and click on password field\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@id='password']\")))\n            element.click()\n    \n        with allure.step(\"Type in the password\"):\n            element.send_keys(\"99027\")\n    \n        with allure.step(\"Wait for and press Login button\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Login']\")))\n            element.click()\n    \n        # Wait for URL to change or timeout after 10 seconds\n        with allure.step(\"Wait for URL to change to dashboard\"):\n            try:\n>               wait.until(EC.url_contains(\"/dashboard\"))\n\nXeed_Login_Page\\Test_TC002.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5b5a6fbe919beba8c0f049feb5b8bfb2\")>, method = <function url_contains.<locals>._predicate at 0x0000019481C936A0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5b5a6fbe919beba8c0f049feb5b8bfb2\")>\n\n    @allure.feature(\"XEED_Ventures_Login_Page\")\n    def test_TC002(setup):\n        driver = setup\n        wait = WebDriverWait(driver, 10)  # 10 seconds explicit wait\n    \n        with allure.step(\"Open Xeed Ventures Login Page\"):\n            driver.get(\"http://157.15.202.244:88/authentication/login\")\n    \n        with allure.step(\"Wait for and click on username field\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@id='username']\")))\n            element.click()\n    \n        with allure.step(\"Type in the username\"):\n            element.send_keys(\"Rohit\")\n    \n        with allure.step(\"Wait for and click on password field\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@id='password']\")))\n            element.click()\n    \n        with allure.step(\"Type in the password\"):\n            element.send_keys(\"99027\")\n    \n        with allure.step(\"Wait for and press Login button\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Login']\")))\n            element.click()\n    \n        # Wait for URL to change or timeout after 10 seconds\n        with allure.step(\"Wait for URL to change to dashboard\"):\n            try:\n                wait.until(EC.url_contains(\"/dashboard\"))\n            except:\n                allure.attach(driver.current_url, name=\"Current URL on failure\", attachment_type=allure.attachment_type.TEXT)\n>               pytest.fail(\"Login failed - URL did not change to dashboard\")\nE               Failed: Login failed - URL did not change to dashboard\n\nXeed_Login_Page\\Test_TC002.py:51: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1749119763227,"stop":1749119767549,"duration":4322},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"Failed: Login failed - URL did not change to dashboard","statusTrace":"setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5b5a6fbe919beba8c0f049feb5b8bfb2\")>\n\n    @allure.feature(\"XEED_Ventures_Login_Page\")\n    def test_TC002(setup):\n        driver = setup\n        wait = WebDriverWait(driver, 10)  # 10 seconds explicit wait\n    \n        with allure.step(\"Open Xeed Ventures Login Page\"):\n            driver.get(\"http://157.15.202.244:88/authentication/login\")\n    \n        with allure.step(\"Wait for and click on username field\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@id='username']\")))\n            element.click()\n    \n        with allure.step(\"Type in the username\"):\n            element.send_keys(\"Rohit\")\n    \n        with allure.step(\"Wait for and click on password field\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@id='password']\")))\n            element.click()\n    \n        with allure.step(\"Type in the password\"):\n            element.send_keys(\"99027\")\n    \n        with allure.step(\"Wait for and press Login button\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Login']\")))\n            element.click()\n    \n        # Wait for URL to change or timeout after 10 seconds\n        with allure.step(\"Wait for URL to change to dashboard\"):\n            try:\n>               wait.until(EC.url_contains(\"/dashboard\"))\n\nXeed_Login_Page\\Test_TC002.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5b5a6fbe919beba8c0f049feb5b8bfb2\")>, method = <function url_contains.<locals>._predicate at 0x0000019481C936A0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5b5a6fbe919beba8c0f049feb5b8bfb2\")>\n\n    @allure.feature(\"XEED_Ventures_Login_Page\")\n    def test_TC002(setup):\n        driver = setup\n        wait = WebDriverWait(driver, 10)  # 10 seconds explicit wait\n    \n        with allure.step(\"Open Xeed Ventures Login Page\"):\n            driver.get(\"http://157.15.202.244:88/authentication/login\")\n    \n        with allure.step(\"Wait for and click on username field\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@id='username']\")))\n            element.click()\n    \n        with allure.step(\"Type in the username\"):\n            element.send_keys(\"Rohit\")\n    \n        with allure.step(\"Wait for and click on password field\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@id='password']\")))\n            element.click()\n    \n        with allure.step(\"Type in the password\"):\n            element.send_keys(\"99027\")\n    \n        with allure.step(\"Wait for and press Login button\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Login']\")))\n            element.click()\n    \n        # Wait for URL to change or timeout after 10 seconds\n        with allure.step(\"Wait for URL to change to dashboard\"):\n            try:\n                wait.until(EC.url_contains(\"/dashboard\"))\n            except:\n                allure.attach(driver.current_url, name=\"Current URL on failure\", attachment_type=allure.attachment_type.TEXT)\n>               pytest.fail(\"Login failed - URL did not change to dashboard\")\nE               Failed: Login failed - URL did not change to dashboard\n\nXeed_Login_Page\\Test_TC002.py:51: Failed","steps":[{"name":"Open Xeed Ventures Login Page","time":{"start":1749119767551,"stop":1749119769236,"duration":1685},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"Wait for and click on username field","time":{"start":1749119769236,"stop":1749119769456,"duration":220},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"Type in the username","time":{"start":1749119769456,"stop":1749119769541,"duration":85},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"Wait for and click on password field","time":{"start":1749119769541,"stop":1749119769646,"duration":105},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"Type in the password","time":{"start":1749119769646,"stop":1749119769692,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"Wait for and press Login button","time":{"start":1749119769692,"stop":1749119769775,"duration":83},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"Wait for URL to change to dashboard","time":{"start":1749119769776,"stop":1749119779921,"duration":10145},"status":"failed","statusMessage":"Failed: Login failed - URL did not change to dashboard\n","statusTrace":"  File \"C:\\Users\\sagar\\PycharmProjects\\TestingProject\\Xeed_Login_Page\\Test_TC002.py\", line 51, in test_TC002\n    pytest.fail(\"Login failed - URL did not change to dashboard\")\n    ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\sagar\\PycharmProjects\\TestingProject\\venv\\Lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[{"uid":"2572d2b139551555","name":"Current URL on failure","source":"2572d2b139551555.txt","type":"text/plain","size":45}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"stepsCount":0,"attachmentStep":false,"hasContent":true}],"attachments":[],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"stepsCount":7,"attachmentStep":false,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1749119780130,"stop":1749119782374,"duration":2244},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"labels":[{"name":"feature","value":"XEED_Ventures_Login_Page"},{"name":"parentSuite","value":"Xeed_Login_Page"},{"name":"suite","value":"Test_TC002"},{"name":"host","value":"DESKTOP-0Q1NQ4H"},{"name":"thread","value":"52764-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Xeed_Login_Page.Test_TC002"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"7575ac16ac012e14.json","parameterValues":[]}