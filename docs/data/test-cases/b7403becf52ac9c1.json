{"uid":"b7403becf52ac9c1","name":"test_login","fullName":"test_check.TestAutomation#test_login","historyId":"a17e2442f5a3deaa15bbe3b9f8c3a327","time":{"start":1740379060184,"stop":1740379076558,"duration":16374},"description":"This test case verifies the login functionality with correct credentials.","descriptionHtml":"<p>This test case verifies the login functionality with correct credentials.</p>\n","status":"failed","statusMessage":"AssertionError: Test Case Failed\nassert 'Fail' == 'Pass'\n  \n  - Pass\n  + Fail","statusTrace":"self = <test_check.TestAutomation object at 0x000001BC457A54F0>\n\n    def test_login(self):\n        username = \"abccompany\"\n        password = \"abc1234$\"\n        test_case_id = \"TC_Login_100\"\n    \n        # Attaching key details in the report\n        allure.attach(f\"Testcase ID: {test_case_id}\", name=\"Testcase ID\", attachment_type=allure.attachment_type.TEXT)\n        allure.attach(\"Module: Login\", name=\"Feature/Module\", attachment_type=allure.attachment_type.TEXT)\n        allure.attach(\"Verify login functionality with valid credentials\", name=\"Test Scenario\", attachment_type=allure.attachment_type.TEXT)\n        allure.attach(f\"Username: {username}, Password: {password}\", name=\"Input Data\", attachment_type=allure.attachment_type.TEXT)\n        allure.attach(\"Expected Result: User should be able to log in successfully\", name=\"Expected Result\", attachment_type=allure.attachment_type.TEXT)\n    \n        start_time = time.time()  # Capture start time for execution time calculation\n    \n        with allure.step(\"Step 1: Open the login page\"):\n            self.driver.get(\"http://157.15.202.244:81/\")\n    \n        with allure.step(\"Step 2: Switch to login frame\"):\n            self.driver.switch_to.frame(self.wait.until(EC.presence_of_element_located((By.XPATH, \"//iframe[@id='mainframe']\"))))\n    \n        with allure.step(\"Step 3: Enter username and password\"):\n            self.wait.until(EC.visibility_of_element_located((By.ID, \"ctrl_Userlogin_txtLoginId\"))).send_keys(username)\n            self.wait.until(EC.visibility_of_element_located((By.ID, \"ctrl_Userlogin_txtPassword\"))).send_keys(password)\n    \n        with allure.step(\"Step 4: Click the login button\"):\n            self.wait.until(EC.visibility_of_element_located((By.ID, \"ctrl_Userlogin_btnSignIn\"))).click()\n    \n        time.sleep(3)  # Wait for login process\n    \n        # Capture execution time\n        execution_time = time.time() - start_time\n        allure.attach(f\"Execution Time: {execution_time:.2f} seconds\", name=\"Execution Time\", attachment_type=allure.attachment_type.TEXT)\n    \n        # Validate successful login (example check)\n        try:\n            dashboard_element = self.wait.until(EC.presence_of_element_located((By.XPATH, \"//td[@id='tdSettings']\")))\n            assert dashboard_element.is_displayed()\n            status = \"Pass\"\n        except Exception as e:\n            status = \"Fail\"\n            allure.attach(str(e), name=\"Error Details\", attachment_type=allure.attachment_type.TEXT)\n    \n        allure.attach(f\"Status: {status}\", name=\"Test Status (Pass/Fail)\", attachment_type=allure.attachment_type.TEXT)\n    \n>       assert status == \"Pass\", \"Test Case Failed\"\nE       AssertionError: Test Case Failed\nE       assert 'Fail' == 'Pass'\nE         \nE         - Pass\nE         + Fail\n\ntest_check.py:76: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1740379057219,"stop":1740379060181,"duration":2962},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"testStage":{"description":"This test case verifies the login functionality with correct credentials.","status":"failed","statusMessage":"AssertionError: Test Case Failed\nassert 'Fail' == 'Pass'\n  \n  - Pass\n  + Fail","statusTrace":"self = <test_check.TestAutomation object at 0x000001BC457A54F0>\n\n    def test_login(self):\n        username = \"abccompany\"\n        password = \"abc1234$\"\n        test_case_id = \"TC_Login_100\"\n    \n        # Attaching key details in the report\n        allure.attach(f\"Testcase ID: {test_case_id}\", name=\"Testcase ID\", attachment_type=allure.attachment_type.TEXT)\n        allure.attach(\"Module: Login\", name=\"Feature/Module\", attachment_type=allure.attachment_type.TEXT)\n        allure.attach(\"Verify login functionality with valid credentials\", name=\"Test Scenario\", attachment_type=allure.attachment_type.TEXT)\n        allure.attach(f\"Username: {username}, Password: {password}\", name=\"Input Data\", attachment_type=allure.attachment_type.TEXT)\n        allure.attach(\"Expected Result: User should be able to log in successfully\", name=\"Expected Result\", attachment_type=allure.attachment_type.TEXT)\n    \n        start_time = time.time()  # Capture start time for execution time calculation\n    \n        with allure.step(\"Step 1: Open the login page\"):\n            self.driver.get(\"http://157.15.202.244:81/\")\n    \n        with allure.step(\"Step 2: Switch to login frame\"):\n            self.driver.switch_to.frame(self.wait.until(EC.presence_of_element_located((By.XPATH, \"//iframe[@id='mainframe']\"))))\n    \n        with allure.step(\"Step 3: Enter username and password\"):\n            self.wait.until(EC.visibility_of_element_located((By.ID, \"ctrl_Userlogin_txtLoginId\"))).send_keys(username)\n            self.wait.until(EC.visibility_of_element_located((By.ID, \"ctrl_Userlogin_txtPassword\"))).send_keys(password)\n    \n        with allure.step(\"Step 4: Click the login button\"):\n            self.wait.until(EC.visibility_of_element_located((By.ID, \"ctrl_Userlogin_btnSignIn\"))).click()\n    \n        time.sleep(3)  # Wait for login process\n    \n        # Capture execution time\n        execution_time = time.time() - start_time\n        allure.attach(f\"Execution Time: {execution_time:.2f} seconds\", name=\"Execution Time\", attachment_type=allure.attachment_type.TEXT)\n    \n        # Validate successful login (example check)\n        try:\n            dashboard_element = self.wait.until(EC.presence_of_element_located((By.XPATH, \"//td[@id='tdSettings']\")))\n            assert dashboard_element.is_displayed()\n            status = \"Pass\"\n        except Exception as e:\n            status = \"Fail\"\n            allure.attach(str(e), name=\"Error Details\", attachment_type=allure.attachment_type.TEXT)\n    \n        allure.attach(f\"Status: {status}\", name=\"Test Status (Pass/Fail)\", attachment_type=allure.attachment_type.TEXT)\n    \n>       assert status == \"Pass\", \"Test Case Failed\"\nE       AssertionError: Test Case Failed\nE       assert 'Fail' == 'Pass'\nE         \nE         - Pass\nE         + Fail\n\ntest_check.py:76: AssertionError","steps":[{"name":"Step 1: Open the login page","time":{"start":1740379060197,"stop":1740379062609,"duration":2412},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"Step 2: Switch to login frame","time":{"start":1740379062609,"stop":1740379062644,"duration":35},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"Step 3: Enter username and password","time":{"start":1740379062644,"stop":1740379062799,"duration":155},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"Step 4: Click the login button","time":{"start":1740379062799,"stop":1740379063296,"duration":497},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"attachments":[{"uid":"de657ec642a0d66e","name":"Testcase ID","source":"de657ec642a0d66e.txt","type":"text/plain","size":25},{"uid":"a5e6e6f4fc123eca","name":"Feature/Module","source":"a5e6e6f4fc123eca.txt","type":"text/plain","size":13},{"uid":"8e15f69532ac6944","name":"Test Scenario","source":"8e15f69532ac6944.txt","type":"text/plain","size":49},{"uid":"a7e3ee8cd5be1d50","name":"Input Data","source":"a7e3ee8cd5be1d50.txt","type":"text/plain","size":40},{"uid":"38eb637d765636f4","name":"Expected Result","source":"38eb637d765636f4.txt","type":"text/plain","size":59},{"uid":"bacdeddd82667040","name":"Execution Time","source":"bacdeddd82667040.txt","type":"text/plain","size":28},{"uid":"8670b35b10135e49","name":"Error Details","source":"8670b35b10135e49.txt","type":"text/plain","size":697},{"uid":"75c31869f20bb89e","name":"Test Status (Pass/Fail)","source":"75c31869f20bb89e.txt","type":"text/plain","size":12}],"parameters":[],"attachmentsCount":8,"shouldDisplayMessage":true,"hasContent":true,"stepsCount":4,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1740379076743,"stop":1740379079000,"duration":2257},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"labels":[{"name":"Test Case ID","value":"TC_Login_100"},{"name":"feature","value":"Login Module"},{"name":"Script Name","value":"test_login.py"},{"name":"severity","value":"critical"},{"name":"story","value":"Test login functionality with valid credentials"},{"name":"tag","value":"@pytest.mark.usefixtures('setup')"},{"name":"suite","value":"test_check"},{"name":"subSuite","value":"TestAutomation"},{"name":"host","value":"DESKTOP-0Q1NQ4H"},{"name":"thread","value":"27140-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_check"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.usefixtures('setup')"]},"source":"b7403becf52ac9c1.json","parameterValues":[]}